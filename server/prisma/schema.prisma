generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  name         String
  email        String   @unique
  passwordHash String
  avatarUrl    String?  @db.Text
  createdAt    DateTime @default(now())

  // Relations
  threads     Thread[]
  replies     Reply[]
  threadVotes ThreadVote[]
  replyVotes  ReplyVote[]
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  threads Thread[] // A category can have many threads
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  threadTags ThreadTag[] // A tag can be linked to many threads via ThreadTag
}

model Thread {
  id         Int      @id @default(autoincrement())
  title      String
  content    String
  categoryId Int
  authorId   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  category   Category     @relation(fields: [categoryId], references: [id])
  author     User         @relation(fields: [authorId], references: [id])
  threadTags ThreadTag[]
  replies    Reply[]
  votes      ThreadVote[]

  @@index([categoryId])
  @@index([authorId])
}

model ThreadTag {
  id       Int @id @default(autoincrement())
  threadId Int
  tagId    Int

  // Relations
  thread Thread @relation(fields: [threadId], references: [id])
  tag    Tag    @relation(fields: [tagId], references: [id])

  @@unique([threadId, tagId])
}

model Reply {
  id        Int      @id @default(autoincrement())
  content   String
  threadId  Int
  authorId  Int
  parentId  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  thread   Thread      @relation(fields: [threadId], references: [id])
  author   User        @relation(fields: [authorId], references: [id])
  parent   Reply?      @relation("ReplyToReply", fields: [parentId], references: [id])
  children Reply[]     @relation("ReplyToReply")
  votes    ReplyVote[]

  @@index([threadId])
  @@index([authorId])
  @@index([parentId])
}

model ThreadVote {
  id        Int      @id @default(autoincrement())
  userId    Int
  threadId  Int
  value     Int // 1 or -1
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  thread Thread @relation(fields: [threadId], references: [id])

  @@unique([userId, threadId]) // prevent double-voting
  @@index([threadId])
}

model ReplyVote {
  id        Int      @id @default(autoincrement())
  userId    Int
  replyId   Int
  value     Int // 1 or -1
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user  User  @relation(fields: [userId], references: [id])
  reply Reply @relation(fields: [replyId], references: [id])

  @@unique([userId, replyId]) // prevent double-voting
  @@index([replyId])
}
